# 0! = 1
# 1! = 1
# 2! = 2
# 3! = 6
# 4! = 24
# 5! = 120

# 0 -> 0 = 0*0!
# 1 -> 10 = 1*1! + 0*0!
# 2 -> 100 = 1*2! + 0*1! + 0*0!
# 3 -> 110 = 1*2! + 1*1! + 0*0!
# 4 -> 200 = 2*2! + 0*1! + 0*0!
# 5 -> 210 = 2*2! + 1*1! + 0*0!
# 6 -> 1000 = 1*3! + 0*2! + 0*1! + 0*0!
# 7 -> 1010 = 1*3! + 0*2! + 1*1! + 0*0!
# 8 -> 1100 = 1*3! + 1*2! + 0*1! + 0*0!
# 9 -> 1110
# 10-> 1200

# 0   abcd
# 1   abdc
# 2   acbd
# 3   acdb
# 4   adbc
# 5   adcb
# 6   bacd
# 7   badc
# 8   bcad
# 9   bcda
# 10  bdac
# 11  bdca
# 12  cabd
# 13  cadb
# 14  cbad
# 15  cbda
# 16  cdab
# 17  cdba
# 18  dabc
# 19  dacb
# 20  dbac
# 21  dbca
# 22  dcab
# 23  dcba




# Quotient        Reminder        Factorial Representation
# 349/1            349               0                             0
# 349/2            174               1                            10
# 174/3            58                0                           010
# 58/4             14                2                          2010
# 14/5             2                 4                         42010
# 2/6              0                 2                        242010




# https://medium.com/@aiswaryamathur/find-the-n-th-permutation-of-an-ordered-string-using-factorial-number-system-9c81e34ab0c8
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)


def to_Factorial(v):
    import math
    out = [0]
    i = 2
    while v > 1:
        out.insert(0, (v % i))
        v = math.floor(v / i)
        i += 1
        # print("\t\t\t", i, v/i, v%i, out)

    if v != 0:
        out.insert(0, 1)

    return "".join(map(str, out))


def fac_to_num(s):
    out = 0
    s = str(s)
    for i in range(len(s)):
        # print("\t\t\t",int(s[-i-1]), "* {}!".format(i), " = ", int(s[-i-1]), " * ", factorial(i))
        out += int(s[-i-1]) * factorial(i)

    return out

# print(fac_to_num(242010))
# print(fac_to_num(1100))








def unique(*x):
    return len(x) == len(set(x))


def array_to_str(*x):
    return "".join(map(str, x))


# for q in [6,9]:

V = [1, 2, 3, 4, 5,     6, 9] #
D = [1, 2, 3, 4, 5,     6, 9] #
C = [1, 2, 3, 4, 5,     6, 9] #
R = [7, 8,     6, 9] #
E = [1, 2, 3, 4, 5, 7, 8,     6, 9] 
A = [1, 2, 3, 4, 5, 7, 8,     6, 9] #
U = [1, 2, 3, 4, 5, 7, 8,     6, 9] #
G = [1, 2, 3, 4, 5, 7, 8,     6, 9] #

# VVD
# Dzz
# CDA
#  CU
# REG

count = checks = 0
dots1 = dots2 = dots3 = 0

# V + D + C = R dus minimaal  1 + 2 + 3
# V + D + C + 1 == R 
R = [6, 7, 8, 9]

for v in V:
    for d in D:
        if not unique(v,d): continue # 1
        for c in C:
            if not unique(v,d,c): continue # 1
            if v + d + c + 1 > 10: continue # 2
            for r in R:
                if not unique(v,d,c,r): continue # 1
                if (v + d + c + 1) % 10 != r: continue # 3
                for e in E:
                    if not unique(v,d,c,r,e): continue # 1
                    if (v + 6 + d + c +1) % 10 != e and (v + 6 + d + c +2) % 10 != e: continue # 4
                    for a in A:
                        if not unique(v,d,c,r,e,a): continue # 1
                        for u in U:
                            if not unique(v,d,c,r,e,a,u): continue # 1
                            for g in G:
                                if not unique(v,d,c,r,e,a,u,g): continue # 1
                                if (d + 6 + a + u) % 10 != g: continue # 5
                                text = "{}{}{} + {}66 + {}{}{} + {}{} == {}{}{}".format(v,v,d, d, c,d,a, c,u, r,e,g)

                                dots = ""
                                if eval("({}+6+{}+{})%10 == {}".format(d,a,u,g)):
                                    dots = "."
                                    dots1 += 1
                                if eval("({}+6+{}+{}+ 1)%10  == {}".format(v,d,c,e)):
                                    dots = ".."
                                    dots2 += 1
                                if eval("({}+6+{}+{}+ 2)%10  == {}".format(v,d,c,e)):
                                    dots = "..."
                                    dots3 += 1

                                lijstje = array_to_str(v,d,c,r,e,a,u,g)                                    
                                if eval(text):
                                    print(text, True, lijstje, dots, to_Factorial(int(lijstje)), sep="\t")
                                    count += 1
                                else:
                                    print(text, "....", lijstje, dots, to_Factorial(int(lijstje)), sep="\t")
                                checks += 1

print("\n\n")
print("{}/{}".format(count, checks))
print("{} {} {}".format(dots1, dots2, dots3))
print("\n\n")


"""

# 114 + 466 + 247 + 26 == 853
# 114 + 466 + 246 + 27 == 853
# 224 + 466 + 147 + 16 == 853
# 224 + 466 + 146 + 17 == 853

# 112 + 266 + 328 + 39 == 745
# 112 + 266 + 329 + 38 == 745
# 113 + 366 + 432 + 47 == 958
# 113 + 366 + 437 + 42 == 958
# 221 + 166 + 417 + 49 == 853
# 221 + 166 + 419 + 47 == 853
# 331 + 166 + 412 + 48 == 957
# 331 + 166 + 418 + 42 == 957
# 332 + 266 + 128 + 19 == 745
# 332 + 266 + 129 + 18 == 745
# 441 + 166 + 217 + 29 == 853
# 441 + 166 + 219 + 27 == 853
# 441 + 166 + 312 + 38 == 957
# 441 + 166 + 318 + 32 == 957
# 443 + 366 + 132 + 17 == 958
# 443 + 366 + 137 + 12 == 958

"""



# 112 + 266 + 325 + 36 == 749	....	12374569	...	34071520010
# 112 + 266 + 328 + 39 == 745	True	12374895	...	34072202110
# 112 + 266 + 326 + 35 == 749	....	12374659	...	34072003010
# 112 + 266 + 329 + 38 == 745	True	12374985	...	34072241110
# 112 + 266 + 423 + 46 == 857	....	12485367	...	34351432110
# 112 + 266 + 426 + 43 == 857	....	12485637	...	34352043110
# 112 + 266 + 426 + 49 == 853	True	12485693	...	34352120210
# 112 + 266 + 429 + 46 == 853	True	12485963	...	34352331210
# 112 + 266 + 523 + 57 == 968	....	12596378	...	34631540100
# 112 + 266 + 527 + 53 == 968	....	12596738	...	34632240100
# 112 + 266 + 527 + 58 == 963	True	12596783	...	34632303210
# 112 + 266 + 528 + 57 == 963	True	12596873	...	34632342210
# 113 + 366 + 238 + 29 == 746	True	13274896	...	36516202200
# 113 + 366 + 239 + 28 == 746	True	13274986	...	36516241200
# 113 + 366 + 432 + 47 == 958	True	13495278	..	37154231000
# 113 + 366 + 432 + 46 == 957	True	13495267	..	37154223010
# 113 + 366 + 437 + 42 == 958	True	13495728	..	37155020000
# 113 + 366 + 437 + 46 == 952	....	13495762	..	37155031200
# 113 + 366 + 436 + 42 == 957	True	13495627	..	37154523010
# 113 + 366 + 436 + 47 == 952	....	13495672	..	37154542200
# 113 + 366 + 432 + 47 == 968	....	13496278	...	37155443200
# 113 + 366 + 435 + 48 == 962	True	13496582	...	37156122100
# 113 + 366 + 437 + 42 == 968	....	13496728	...	37156232200
# 113 + 366 + 438 + 45 == 962	True	13496852	...	37156333100
# 114 + 466 + 243 + 26 == 859	....	14285369	...	39322432210
# 114 + 466 + 247 + 26 == 853	True	14285763	...	39323200110
# 114 + 466 + 247 + 29 == 856	True	14285796	...	39323212000
# 114 + 466 + 246 + 23 == 859	....	14285639	...	39323043210
# 114 + 466 + 246 + 27 == 853	True	14285673	...	39323111110
# 114 + 466 + 249 + 27 == 856	True	14285976	...	39323340000
# 114 + 466 + 342 + 36 == 958	True	14395268	..	39601223100
# 114 + 466 + 346 + 32 == 958	True	14395628	..	39601523100
# 114 + 466 + 342 + 35 == 967	....	14396257	...	39602440010
# 114 + 466 + 345 + 32 == 967	....	14396527	...	39603101010
# 114 + 466 + 345 + 37 == 962	True	14396572	...	39603120200
# 114 + 466 + 347 + 35 == 962	True	14396752	...	39603242200
# 114 + 466 + 347 + 38 == 965	True	14396785	...	39603310010
# 114 + 466 + 348 + 37 == 965	True	14396875	...	39603343010
# 115 + 566 + 253 + 24 == 968	....	15296348	...	42126523100
# 115 + 566 + 254 + 23 == 968	....	15296438	...	42130012100
# 115 + 566 + 254 + 28 == 963	True	15296483	...	42130031210
# 115 + 566 + 258 + 24 == 963	True	15296843	...	42130331210
# 221 + 166 + 315 + 36 == 748	....	21374568	...	58806520000
# 221 + 166 + 316 + 35 == 748	....	21374658	...	58810003000
# 221 + 166 + 417 + 49 == 853	True	21485793	...	59170211110
# 221 + 166 + 419 + 47 == 853	True	21485973	...	59170333110
# 221 + 166 + 514 + 57 == 968	....	21596478	...	59450031000
# 221 + 166 + 517 + 54 == 968	....	21596748	...	59450242000
# 223 + 366 + 138 + 19 == 746	True	23174896	...	63761202200
# 223 + 366 + 139 + 18 == 746	True	23174986	...	63761241200
# 224 + 466 + 143 + 16 == 859	....	24185369	...	66564432210
# 224 + 466 + 147 + 16 == 853	True	24185763	...	66565200110
# 224 + 466 + 147 + 19 == 856	True	24185796	...	66565212000
# 224 + 466 + 146 + 13 == 859	....	24185639	...	66565043210
# 224 + 466 + 146 + 17 == 853	True	24185673	...	66565111110
# 224 + 466 + 149 + 17 == 856	True	24185976	...	66565340000
# 225 + 566 + 153 + 14 == 968	....	25196348	...	69371523100
# 225 + 566 + 154 + 13 == 968	....	25196438	...	69372012100
# 225 + 566 + 154 + 18 == 963	True	25196483	...	69372031210
# 225 + 566 + 158 + 14 == 963	True	25196843	...	69372331210
# 331 + 166 + 215 + 26 == 748	....	31274568	...	86151520000
# 331 + 166 + 216 + 25 == 748	....	31274658	...	86152003000
# 331 + 166 + 412 + 47 == 956	True	31495276	..	86710230200
# 331 + 166 + 412 + 48 == 957	True	31495287	..	86710232110
# 331 + 166 + 417 + 42 == 956	True	31495726	..	86711013200
# 331 + 166 + 417 + 48 == 952	....	31495782	..	86711041000
# 331 + 166 + 418 + 42 == 957	True	31495827	..	86711110110
# 331 + 166 + 418 + 47 == 952	....	31495872	..	86711130000
# 331 + 166 + 412 + 48 == 967	....	31496287	...	86711501010
# 331 + 166 + 417 + 48 == 962	True	31496782	...	86712303200
# 331 + 166 + 418 + 42 == 967	....	31496827	...	86712323010
# 331 + 166 + 418 + 47 == 962	True	31496872	...	86712342200
# 332 + 266 + 125 + 16 == 749	....	32174569	...	88575520010
# 332 + 266 + 128 + 19 == 745	True	32174895	...	88576202110
# 332 + 266 + 126 + 15 == 749	....	32174659	...	88576003010
# 332 + 266 + 129 + 18 == 745	True	32174985	...	88576241110
# 334 + 466 + 142 + 16 == 958	True	34195268	..	94205223100
# 334 + 466 + 146 + 12 == 958	True	34195628	..	94205523100
# 334 + 466 + 142 + 15 == 967	....	34196257	...	94206440010
# 334 + 466 + 145 + 12 == 967	....	34196527	...	94210101010
# 334 + 466 + 145 + 17 == 962	True	34196572	...	94210120200
# 334 + 466 + 147 + 15 == 962	True	34196752	...	94210242200
# 334 + 466 + 147 + 18 == 965	True	34196785	...	94210310010
# 334 + 466 + 148 + 17 == 965	True	34196875	...	94210343010
# 441 + 166 + 217 + 29 == 853	True	41285793	...	103674211110
# 441 + 166 + 219 + 27 == 853	True	41285973	...	103674333110
# 441 + 166 + 312 + 37 == 956	True	41395276	..	104052230200
# 441 + 166 + 312 + 38 == 957	True	41395287	..	104052232110
# 441 + 166 + 317 + 32 == 956	True	41395726	..	104053013200
# 441 + 166 + 317 + 38 == 952	....	41395782	..	104053041000
# 441 + 166 + 318 + 32 == 957	True	41395827	..	104053110110
# 441 + 166 + 318 + 37 == 952	....	41395872	..	104053130000
# 441 + 166 + 312 + 38 == 967	....	41396287	...	104053501010
# 441 + 166 + 317 + 38 == 962	True	41396782	...	104054303200
# 441 + 166 + 318 + 32 == 967	....	41396827	...	104054323010
# 441 + 166 + 318 + 37 == 962	True	41396872	...	104054342200
# 442 + 266 + 123 + 16 == 857	....	42185367	...	106220432110
# 442 + 266 + 126 + 13 == 857	....	42185637	...	106221043110
# 442 + 266 + 126 + 19 == 853	True	42185693	...	106221120210
# 442 + 266 + 129 + 16 == 853	True	42185963	...	106221331210
# 443 + 366 + 132 + 17 == 958	True	43195278	..	109023231000
# 443 + 366 + 132 + 16 == 957	True	43195267	..	109023223010
# 443 + 366 + 137 + 12 == 958	True	43195728	..	109024020000
# 443 + 366 + 137 + 16 == 952	....	43195762	..	109024031200
# 443 + 366 + 136 + 12 == 957	True	43195627	..	109023523010
# 443 + 366 + 136 + 17 == 952	....	43195672	..	109023542200
# 443 + 366 + 132 + 17 == 968	....	43196278	...	109024443200
# 443 + 366 + 135 + 18 == 962	True	43196582	...	109025122100
# 443 + 366 + 137 + 12 == 968	....	43196728	...	109025232200
# 443 + 366 + 138 + 15 == 962	True	43196852	...	109025333100
# 551 + 166 + 214 + 27 == 968	....	51296478	...	131316031000
# 551 + 166 + 217 + 24 == 968	....	51296748	...	131316242000
# 552 + 266 + 123 + 17 == 968	....	52196378	...	133742540100
# 552 + 266 + 127 + 13 == 968	....	52196738	...	133743240100
# 552 + 266 + 127 + 18 == 963	True	52196783	...	133743303210
# 552 + 266 + 128 + 17 == 963	True	52196873	...	133743342210












# 112 + 266 + 328 + 39 == 745	True	12374895	...	34072202110                                     TODO
# 112 + 266 + 329 + 38 == 745	True	12374985	...	34072241110     39000           <--             TODO
# 112 + 266 + 426 + 49 == 853	True	12485693	...	34352120210     279879100
# 112 + 266 + 429 + 46 == 853	True	12485963	...	34352331210     211000
# 112 + 266 + 527 + 58 == 963	True	12596783	...	34632303210     279972000
# 112 + 266 + 528 + 57 == 963	True	12596873	...	34632342210     39000           <--
# 113 + 366 + 238 + 29 == 746	True	13274896	...	36516202200     1883859990
# 113 + 366 + 239 + 28 == 746	True	13274986	...	36516241200     39000           <--
# 113 + 366 + 432 + 47 == 958	True	13495278	..	37154231000     637981810                       TODO
# 113 + 366 + 432 + 46 == 957	True	13495267	..	37154223010     7990
# 113 + 366 + 437 + 42 == 958	True	13495728	..	37155020000     292010               |          TODO
# 113 + 366 + 436 + 42 == 957	True	13495627	..	37154523010     496990
# 113 + 366 + 435 + 48 == 962	True	13496582	...	37156122100     1102100
# 113 + 366 + 438 + 45 == 962	True	13496852	...	37156333100     211000
# 114 + 466 + 247 + 26 == 853	True	14285763	...	39323200110     2166778010              XXX
# 114 + 466 + 247 + 29 == 856	True	14285796	...	39323212000     89000
# 114 + 466 + 246 + 27 == 853	True	14285673	...	39323111110     11890            -      XXX
# 114 + 466 + 249 + 27 == 856	True	14285976	...	39323340000     128000
# 114 + 466 + 342 + 36 == 958	True	14395268	..	39601223100     277883100
# 114 + 466 + 346 + 32 == 958	True	14395628	..	39601523100     300000
# 114 + 466 + 345 + 37 == 962	True	14396572	...	39603120200     1597100
# 114 + 466 + 347 + 35 == 962	True	14396752	...	39603242200     122000
# 114 + 466 + 347 + 38 == 965	True	14396785	...	39603310010     67810
# 114 + 466 + 348 + 37 == 965	True	14396875	...	39603343010     33000
# 115 + 566 + 254 + 28 == 963	True	15296483	...	42130031210     2526688200
# 115 + 566 + 258 + 24 == 963	True	15296843	...	42130331210     300000
# 221 + 166 + 417 + 49 == 853	True	21485793	...	59170211110     17039879900                     TODO
# 221 + 166 + 419 + 47 == 853	True	21485973	...	59170333110     122000           __             TODO
# 223 + 366 + 138 + 19 == 746	True	23174896	...	63761202200     4590869090
# 223 + 366 + 139 + 18 == 746	True	23174986	...	63761241200     39000           <--
# 224 + 466 + 147 + 16 == 853	True	24185763	...	66565200110     2803869910              XXX
# 224 + 466 + 147 + 19 == 856	True	24185796	...	66565212000     89000
# 224 + 466 + 146 + 17 == 853	True	24185673	...	66565111110     11890            -      XXX
# 224 + 466 + 149 + 17 == 856	True	24185976	...	66565340000     128000
# 225 + 566 + 154 + 18 == 963	True	25196483	...	69372031210     2806691210
# 225 + 566 + 158 + 14 == 963	True	25196843	...	69372331210     300000
# 331 + 166 + 412 + 47 == 956	True	31495276	..	86710230200     17337898990
# 331 + 166 + 412 + 48 == 957	True	31495287	..	86710232110     1910                 /          TODO
# 331 + 166 + 417 + 42 == 956	True	31495726	..	86711013200     781090
# 331 + 166 + 418 + 42 == 957	True	31495827	..	86711110110     96910                           TODO
# 331 + 166 + 417 + 48 == 962	True	31496782	...	86712303200     1193090
# 331 + 166 + 418 + 47 == 962	True	31496872	...	86712342200     39000           <--
# 332 + 266 + 128 + 19 == 745	True	32174895	...	88576202110     1863859910                      TODO
# 332 + 266 + 129 + 18 == 745	True	32174985	...	88576241110     39000           <--             TODO
# 334 + 466 + 142 + 16 == 958	True	34195268	..	94205223100     5628981990
# 334 + 466 + 146 + 12 == 958	True	34195628	..	94205523100     300000
# 334 + 466 + 145 + 17 == 962	True	34196572	...	94210120200     4597100
# 334 + 466 + 147 + 15 == 962	True	34196752	...	94210242200     122000
# 334 + 466 + 147 + 18 == 965	True	34196785	...	94210310010     67810
# 334 + 466 + 148 + 17 == 965	True	34196875	...	94210343010     33000
# 441 + 166 + 217 + 29 == 853	True	41285793	...	103674211110    9463868100                      TODO
# 441 + 166 + 219 + 27 == 853	True	41285973	...	103674333110    122000          __              TODO
# 441 + 166 + 312 + 37 == 956	True	41395276	..	104052230200    377897090
# 441 + 166 + 312 + 38 == 957	True	41395287	..	104052232110    1910                 /          TODO
# 441 + 166 + 317 + 32 == 956	True	41395726	..	104053013200    781090
# 441 + 166 + 318 + 32 == 957	True	41395827	..	104053110110    96910                           TODO
# 441 + 166 + 317 + 38 == 962	True	41396782	...	104054303200    1193090
# 441 + 166 + 318 + 37 == 962	True	41396872	...	104054342200    39000           <--
# 442 + 266 + 126 + 19 == 853	True	42185693	...	106221120210    2166778010
# 442 + 266 + 129 + 16 == 853	True	42185963	...	106221331210    211000
# 443 + 366 + 132 + 17 == 958	True	43195278	..	109023231000    2801891800                      TODO
# 443 + 366 + 132 + 16 == 957	True	43195267	..	109023223010    7990
# 443 + 366 + 137 + 12 == 958	True	43195728	..	109024020000    292010               |          TODO
# 443 + 366 + 136 + 12 == 957	True	43195627	..	109023523010    496990
# 443 + 366 + 135 + 18 == 962	True	43196582	...	109025122100    1102100
# 443 + 366 + 138 + 15 == 962	True	43196852	...	109025333100    211000
# 552 + 266 + 127 + 18 == 963	True	52196783	...	133743303210    24717970110 
# 552 + 266 + 128 + 17 == 963	True	52196873	...	133743342210    39000           <--



lijstje = [34072202110, 34072241110, 34352120210, 34352331210, 34632303210, 34632342210, 36516202200, 36516241200, 37154231000, 37154223010, 37155020000, 37154523010, 37156122100, 37156333100, 39323200110, 39323212000, 39323111110, 39323340000, 39601223100, 39601523100, 39603120200, 39603242200, 39603310010, 39603343010, 42130031210, 42130331210, 59170211110, 59170333110, 63761202200, 63761241200, 66565200110, 66565212000, 66565111110, 66565340000, 69372031210, 69372331210, 86710230200, 86710232110, 86711013200, 86711110110, 86712303200, 86712342200, 88576202110, 88576241110, 94205223100, 94205523100, 94210120200, 94210242200, 94210310010, 94210343010, 103674211110, 103674333110, 104052230200, 104052232110, 104053013200, 104053110110, 104054303200, 104054342200, 106221120210, 106221331210, 109023231000, 109023223010, 109024020000, 109023523010, 109025122100, 109025333100, 133743303210, 133743342210]
lijstje.sort()

# print(lijstje)
lijstje2 = []

for i in range(1, len(lijstje)):
    lijstje2.append(lijstje[i] - lijstje[i-1])


# print(len(lijstje2))
# print(len(set(lijstje2)))

print(lijstje2)
# print(set(lijstje2))

# import collections
# counter=collections.Counter(lijstje2)
# print(counter)


# Counter({
#     39000: 8,
#     211000: 4,
#     300000: 4,
#     122000: 4,
#     7990: 2,
#     292010: 2,
#     496990: 2,
#     1102100: 2,
#     2166778010: 2,
#     89000: 2,
#     11890: 2,
#     128000: 2,
#     67810: 2,
#     33000: 2,
#     1910: 2,
#     781090: 2,
#     96910: 2,
#     1193090: 2,
#     279879100: 1,
#     279972000: 1,
#     1883859990: 1,
#     637981810: 1,
#     277883100: 1,
#     1597100: 1,
#     2526688200: 1,
#     17039879900: 1,
#     4590869090: 1,
#     2803869910: 1,
#     2806691210: 1,
#     17337898990: 1,
#     1863859910: 1,
#     5628981990: 1,
#     4597100: 1,
#     9463868100: 1,
#     377897090: 1,
#     2801891800: 1,
#     24717970110: 1
# })
